#!/bin/bash

set -e

startAll=$(date +%s)

. .env

createMagentoProject() {
  composer create-project --ignore-platform-reqs \
    --repository-url=https://mirror.mage-os.org/ magento/project-community-edition:2.4.5-p1 .
}

getComposerPackages() {
  composer req --ignore-platform-reqs \
    magepal/magento2-gmailsmtpapp yireo/magento2-webp2 dominicwatts/cachewarmer \
    magento/module-bundle-sample-data magento/module-catalog-rule-sample-data magento/module-catalog-sample-data \
    magento/module-cms-sample-data magento/module-configurable-sample-data magento/module-customer-sample-data \
    magento/module-downloadable-sample-data magento/module-grouped-product-sample-data magento/module-msrp-sample-data \
    magento/module-offline-shipping-sample-data magento/module-product-links-sample-data magento/module-review-sample-data \
    magento/module-sales-rule-sample-data magento/module-sales-sample-data magento/module-swatches-sample-data \
    magento/module-tax-sample-data magento/module-theme-sample-data magento/module-widget-sample-data \
    magento/module-wishlist-sample-data magento/sample-data-media
}

composerInstallPackages() {
  composer install --ignore-platform-reqs
}

removeComposerCache() {
  folders=("/root/.composer" "/.composer" "/var/www/.composer" "/var/www/html/.composer")
  for path in "${folders[@]}"; do
    if [ -d "$path" ]; then
      rm -rf "$path"
    fi
  done
}

magentoInstall() {
  bin/magento setup:install --base-url-secure=https://"$1"/ \
    --db-host=/run/mysqld/mysqld.sock --db-name="$MYSQL_DATABASE" --db-user=root --db-password="$MYSQL_ROOT_PASSWORD" \
    --backend-frontname=admin --admin-lastname="$ADMIN_NAME" --admin-firstname="$ADMIN_SURNAME" \
    --admin-email="$ADMIN_EMAIL" --admin-user="$ADMIN_USER" --admin-password="$ADMIN_PASS" \
    --page-cache=redis --page-cache-redis-server="$REDIS_SOCK" --page-cache-redis-db=0 \
    --cache-backend=redis --cache-backend-redis-server="$REDIS_SOCK" --cache-backend-redis-db=1 \
    --session-save=redis --session-save-redis-host="$REDIS_SOCK" --session-save-redis-persistent-id=sess-db2 --session-save-redis-db=2 \
    --search-engine=elasticsearch7 --elasticsearch-host=127.0.0.1 --elasticsearch-port=9200 \
    --cleanup-database --use-sample-data
}

setPerformanceVars() {
  bin/magento config:set catalog/search/enable_eav_indexer 1 &&
    bin/magento config:set dev/template/minify_html 1 &&
    bin/magento config:set dev/js/merge_files 1 &&
    bin/magento config:set dev/js/enable_js_bundling 1 &&
    bin/magento config:set dev/js/minify_files 1 &&
    bin/magento config:set dev/js/move_script_to_bottom 1 &&
    bin/magento config:set dev/css/merge_css_files 1 &&
    bin/magento config:set dev/css/minify_files 1 &&
    bin/magento config:set web/seo/use_rewrites 1 &&
    bin/magento config:set web/url/redirect_to_base 0 &&
    bin/magento config:set web/secure/use_in_frontend 1 &&
    bin/magento config:set web/secure/use_in_adminhtml 1
}

showSuccess() {

  echo "
Backend:\

https://$1/admin\

User: mage2_admin\

Password: mage2_admin123#T\


Frontend:\

https://$1

"
}

setBaseUrl() {
  bin/magento config:set web/unsecure/base_url "http://$1/"
}

if [ -f "composer.json" ]; then
  composerInstallPackages
else
  createMagentoProject
  getComposerPackages
fi

sleep 15
hostname="$(hostname -i)"
if [ ! -f "app/etc/env.php" ]; then
  magentoInstall "$hostname"
  setPerformanceVars
  bin/magento module:disable -c Magento_TwoFactorAuth
  if [ -z "$1" ]; then
    bin/magento module:enable Yireo_Webp2 Yireo_NextGenImages
  fi
  bin/magento ind:rei
  bin/magento cache:flush
fi

setBaseUrl "$hostname"
showSuccess "$hostname"
endAll=$(date +%s)
echo "Setup Time: $((endAll - startAll)) Sec"
